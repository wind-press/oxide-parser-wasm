name: Publish to Packagist

on:
  # workflow_dispatch:
  push:
    tags:
      - "*"

env:
  # The project name specified in your Cargo.toml
  PROJECT_NAME: "oxide_parser_wasm"

jobs:
  build:
    # Set the job to run on the platform specified by the matrix below
    runs-on: ${{ matrix.runner }}

    # Define the build matrix for cross-compilation
    strategy:
      matrix:
        include:
          - name: linux
            runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - name: win
            runner: windows-latest
            target: x86_64-pc-windows-msvc
          - name: macos
            runner: macos-latest
            target: aarch64-apple-darwin

    # The steps to run for each matrix item
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: "${{ matrix.target }}"

      - name: Setup Cache
        uses: Swatinem/rust-cache@v2

      - name: Build Binary
        run: cargo build --verbose --release --target ${{ matrix.target }}

      - name: Copy built binary to php/ext/
        shell: bash
        run: |
          mkdir -p php/ext/

          BIN_NAME=""
          if [[ "${{ matrix.runner }}" == "windows-latest" ]]; then
            BIN_NAME="${PROJECT_NAME}.dll"
          elif [[ "${{ matrix.runner }}" == "macos-latest" ]]; then
            BIN_NAME="lib${PROJECT_NAME}.dylib"
          else
            BIN_NAME="lib${PROJECT_NAME}.so"
          fi

          # The built binary output location
          BIN_OUTPUT="target/${{ matrix.target }}/release/${BIN_NAME}"

          # Copy the built binary to the php/ext/ directory
          cp "${BIN_OUTPUT}" "php/ext/${BIN_NAME}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: php/ext/

  publish:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: collected-artifacts

      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: wind-press/oxide-parser-php
          ref: main
          path: remote-repository
          token: ${{ secrets.ORG_DEV_PAT }}

      # remove remote files, to avoid piling up dead code in remote repository
      - working-directory: remote-repository
        run: |
          git rm -rf .
          git clean -fxd

      - name: Copy the php package folder from 'php' to 'remote-repository'
        run: |
          cp -a php/. remote-repository

      - name: Copy artifacts to target repository
        run: |
          mkdir -p remote-repository/ext/
          cp -a collected-artifacts/* remote-repository/ext/

      - name: Setup Git
        run: |
          git config --global user.name "Joshua Gugun Siagian"
          git config --global user.email "suabahasa@gmail.com"

      - name: Commit and tag
        working-directory: remote-repository
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git add --all
          git commit -m "oxide-parser-wasm ${GITHUB_REF#refs/tags/}"
          git push
          git tag ${GITHUB_REF#refs/tags/} -m "${GITHUB_REF#refs/tags/}"
          git push origin ${GITHUB_REF#refs/tags/}
